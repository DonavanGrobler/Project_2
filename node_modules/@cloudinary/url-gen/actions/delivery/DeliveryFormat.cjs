'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../tslib.es6-18ed4f64.cjs');
var qualifiers_flag = require('../../qualifiers/flag.cjs');
var actions_delivery_DeliveryAction = require('./DeliveryAction.cjs');
var qualifiers_progressive = require('../../qualifiers/progressive.cjs');
require('../../qualifiers/flag/FlagQualifier.cjs');
require('../../internal/qualifier/QualifierValue.cjs');
require('../../internal/qualifier/Qualifier.cjs');
require('../../internal/Action.cjs');
require('../../internal/utils/dataStructureUtils.cjs');

/**
 * @memberOf Actions.Delivery
 * @extends {Actions.Delivery.DeliveryAction}
 * @see Visit {@link Actions.Delivery|Delivery} for an example
 */
var DeliveryFormat = /** @class */ (function (_super) {
    tslib_es6.__extends(DeliveryFormat, _super);
    function DeliveryFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @description Uses lossy compression when delivering animated GIF files.
     * @return {this}
     */
    DeliveryFormat.prototype.lossy = function () {
        this.addFlag(qualifiers_flag.lossy());
        return this;
    };
    /**
     * @description Uses progressive compression when delivering JPG file format.
     * @return {this}
     */
    DeliveryFormat.prototype.progressive = function (mode) {
        if (mode instanceof qualifiers_progressive.ProgressiveQualifier) {
            this.addFlag(mode);
        }
        else {
            this.addFlag(qualifiers_flag.progressive(mode));
        }
        return this;
    };
    /**
     * @description Ensures that images with a transparency channel are delivered in PNG format.
     */
    DeliveryFormat.prototype.preserveTransparency = function () {
        this.addFlag(qualifiers_flag.preserveTransparency());
        return this;
    };
    return DeliveryFormat;
}(actions_delivery_DeliveryAction.DeliveryAction));

exports.DeliveryFormat = DeliveryFormat;
