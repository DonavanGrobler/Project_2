'use strict';

var tslib_es6 = require('../../tslib.es6-18ed4f64.cjs');
var internal_qualifier_Qualifier = require('../../internal/qualifier/Qualifier.cjs');
var internal_Action = require('../../internal/Action.cjs');
var internal_utils_toFloatAsString = require('../../internal/utils/toFloatAsString.cjs');
var qualifiers_aspectRatio_AspectRatioQualifierValue = require('../../qualifiers/aspectRatio/AspectRatioQualifierValue.cjs');
var qualifiers_flag = require('../../qualifiers/flag.cjs');
var qualifiers_flag_FlagQualifier = require('../../qualifiers/flag/FlagQualifier.cjs');
require('../../internal/qualifier/QualifierValue.cjs');
require('../../internal/utils/dataStructureUtils.cjs');

/**
 * @description Defines a resize using width and height.
 * @extends SDK.Action
 * @memberOf Actions.Resize
 * @see Visit {@link Actions.Resize| Resize} for examples
 */
var ResizeSimpleAction = /** @class */ (function (_super) {
    tslib_es6.__extends(ResizeSimpleAction, _super);
    /**
     * @param {string} cropType
     * @param {number | string} cropWidth The required width of a transformed asset.
     * @param {number | string} cropHeight The required height of a transformed asset.
     */
    function ResizeSimpleAction(cropType, cropWidth, cropHeight) {
        var _this = _super.call(this) || this;
        if (cropWidth) {
            _this.addQualifier(new internal_qualifier_Qualifier.Qualifier('w', cropWidth));
        }
        if (cropHeight) {
            _this.addQualifier(new internal_qualifier_Qualifier.Qualifier('h', cropHeight));
        }
        _this.addQualifier(new internal_qualifier_Qualifier.Qualifier('c', cropType));
        return _this;
    }
    /**
     * @description Sets the height of the resize
     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).
     */
    ResizeSimpleAction.prototype.height = function (x) {
        return this.addQualifier(new internal_qualifier_Qualifier.Qualifier('h', x));
    };
    /**
     * @description Sets the width of the resize
     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).
     */
    ResizeSimpleAction.prototype.width = function (x) {
        return this.addQualifier(new internal_qualifier_Qualifier.Qualifier('w', x));
    };
    /**
     * @description Sets the aspect ratio of the asset.
     * For a list of supported types see {@link Qualifiers.AspectRatio |
      * AspectRatio values}
     * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.
     * @return {this}
     */
    ResizeSimpleAction.prototype.aspectRatio = function (ratio) {
        // toFloatAsString is used to ensure 1 turns into 1.0
        if (ratio instanceof qualifiers_aspectRatio_AspectRatioQualifierValue.AspectRatioQualifierValue) {
            return this.addQualifier(new internal_qualifier_Qualifier.Qualifier('ar', ratio));
        }
        if (typeof ratio === 'number' || typeof ratio === 'string') {
            return this.addQualifier(new internal_qualifier_Qualifier.Qualifier('ar', internal_utils_toFloatAsString.toFloatAsString(ratio)));
        }
        if (ratio instanceof qualifiers_flag_FlagQualifier.FlagQualifier) {
            return this.addFlag(ratio);
        }
    };
    /**
     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.
     * @return {this}
     */
    ResizeSimpleAction.prototype.relative = function () {
        return this.addFlag(qualifiers_flag.relative());
    };
    /**
     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region
     * @return {this}
     */
    ResizeSimpleAction.prototype.regionRelative = function () {
        return this.addFlag(qualifiers_flag.regionRelative());
    };
    return ResizeSimpleAction;
}(internal_Action.Action));

module.exports = ResizeSimpleAction;
